const {Entity} = require("blockade/entity/entity");
const {Vector2} = require("blockade/vectors");

class Block extends Entity {
	static object = "block";

	/**
	 * @type {Vector2}
	 */
	velocity = new Vector2();

	/**
	 * Detect if this Block can move in a specified direction
	 * @param {Vector2} direction
	 * @returns {boolean} success
	 */
	canMove(direction) {
		let pos = Vector2.add(this.position, direction);
		let tile = this.game.getTile(pos);
		if (tile === undefined) return false;
		if (this.color !== tile.color) return false;
		if (this.color !== 0 && tile.color !== 0) return false;
		let block = this.game.getBlock(pos);
		return block === undefined;
	}

	/**
	 * Attempt to set the velocity of this Block to a specified direction
	 * @param {Vector2} direction
	 * @returns {boolean} success
	 */
	setVelocity(direction) {
		if (!this.canMove(direction)) {
			this.velocity = Vector2.zero;
			return false;
		}
		this.velocity = direction;
		return true;
	}

	/**
	 * Move an instance of this Block
	 * @returns {boolean} success
	 */
	move() {
		this.position.add(this.velocity);
	}

	/**
	 * Update this Block
	 */
	update() {
		super.update();
		if (!Vector2.equals(this.velocity, Vector2.zero)) {
			this.move();
			this.setVelocity(this.velocity);
			this.changed = true;
		}
		return this.changed;
	}
}

module.exports = {Block};
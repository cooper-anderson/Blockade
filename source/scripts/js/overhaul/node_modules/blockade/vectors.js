class Vector2 {
	static zero = new Vector2();
	static up = new Vector2(0, -1);
	static down = new Vector2(0, 1);
	static left = new Vector2(-1, 0);
	static right = new Vector2(1, 0);

	constructor(x=0, y=0) {
		this.x = x;
		this.y = y;
	}

	add(vector) {
		this.x += vector.x;
		this.y += vector.y;
		return this;
	}

	sub(vector) {
		this.x -= vector.x;
		this.y -= vector.y;
		return this;
	}

	mul(scalar) {
		this.x *= scalar;
		this.y *= scalar;
		return this;
	}

	div(scalar) {
		if (scalar === 0) {
			this.x = 0;
			this.y = 0;
		} else {
			this.x /= scalar;
			this.y /= scalar;
		}
		return this;
	}

	static add(a, b) {
		return new Vector2(a.x + b.x, a.y + b.y);
	}

	static sub(a, b) {
		return new Vector2(a.x - b.x, a.y - b.y);
	}

	static mul(a, b) {
		return new Vector2(a.x * b, a.y * b);
	}

	static div(a, b) {
		return (b === 0) ? new Vector2(a.x / b, a.y / b) : new Vector2();
	}

	static rotate(vector, degrees=90) {
		let x = Math.round(vector.x * Math.cos(degrees * 0.0174533) - vector.y * Math.sin(degrees * 0.0174533));
		let y = Math.round(vector.x * Math.sin(degrees * 0.0174533) + vector.y * Math.cos(degrees * 0.0174533));
		return new Vector2(x, y);
	}

	static fromList(list) {
		return new Vector2(list[0], list[1]);
	}

	static toList(vector) {
		return [vector.x, vector.y];
	}

	static toString(vector) {
		return `<${vector.x}, ${vector.y}>`;
	}

	static fromDirection(direction) {
		if (direction === "up" || direction === 0) return Vector2.up;
		else if (direction === "down" || direction === 2) return Vector2.down;
		else if (direction === "left" || direction === 3) return Vector2.left;
		else if (direction === "right" || direction === 1) return Vector2.right;
		return Vector2.zero;
	}

	static equals(a, b) {
		return a.x === b.x && a.y === b.y;
	}
}

class Vector3 {
	constructor(x=0, y=0, z=0) {
		this.x = x;
		this.y = y;
		this.z = z;
	}

	static FromList(list) {
		return new Vector3(list[0], list[1], list[2]);
	}

	static ToString(vector) {
		return `(${vector.x}, ${vector.y}, ${vector.z})`
	}
}

module.exports = {Vector2, Vector3};